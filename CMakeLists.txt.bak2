# Library CMake
# Make sure to rename the file extension of main.cpp to main.cpp.bak so it will not be sourced
cmake_minimum_required(VERSION 3.10)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Set the project name
project(TexturePacker
    VERSION 1.0
    DESCRIPTION "TexturePacker - A C++20 tool to create spritesheets"
    LANGUAGES CXX)

# Specify the source and include directories
set(SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")

# Recursively collect all source files (.cpp and .h)
# create the library using the collected source files
file(GLOB_RECURSE SOURCES "${SRC_DIR}/*.cpp" "${SRC_DIR}/*.h")


# Set the output directories to avoid clutter in the root folder
set(CMAKE_BINARY_DIR "${CMAKE_SOURCE_DIR}/build/${CMAKE_GENERATOR}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

# Ensure CMake files are also placed in the build folder
set(CMAKE_CACHEFILE_DIR "${CMAKE_BINARY_DIR}")

add_library(${PROJECT_NAME} ${SOURCES})

# Add dependencies
target_include_directories(${PROJECT_NAME}
    PUBLIC
        $<INSTALL_INTERFACE:include>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)
# Set the Visual Studio startup project
if (CMAKE_GENERATOR MATCHES "Visual Studio")
set_property(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}" PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
endif()